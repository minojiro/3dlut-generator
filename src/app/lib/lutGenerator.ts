const LUT_SIZE = 17;

type ColorTable = [number, number, number][];

export const drawStraightChart = (canvas: HTMLCanvasElement) => {
  const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
  const size = LUT_SIZE;
  const cellCount = size ** 3;
  const lineCellCount = Math.ceil(Math.sqrt(cellCount));
  const cellSizeH = canvas.height / lineCellCount;
  const cellSizeW = canvas.width / lineCellCount;
  const colorStep = 255 / (size - 1);
  for (let i = 0; i < cellCount; i++) {
    const x = (i % lineCellCount) * cellSizeW;
    const y = ~~(i / lineCellCount) * cellSizeH;
    const r = (i % size) * colorStep;
    const g = (~~(i / size) % size) * colorStep;
    const b = ~~(i / (size * size)) * colorStep;
    ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;
    ctx.fillRect(x, y, cellSizeW, cellSizeH);
  }
};

export const canvasToColorTable = (canvas: HTMLCanvasElement) => {
  const ctx = canvas.getContext("2d", {
    willReadFrequently: true,
  });
  if (!ctx) return [];
  const size = LUT_SIZE;
  const cellCount = size ** 3;
  const lineCellCount = Math.ceil(Math.sqrt(cellCount));
  const cellSizeH = canvas.height / lineCellCount;
  const cellSizeW = canvas.width / lineCellCount;
  const colorTable: ColorTable = [];
  for (let i = 0; i < cellCount; i++) {
    const x = ~~(((i % lineCellCount) + 0.5) * cellSizeW);
    const y = ~~((~~(i / lineCellCount) + 0.5) * cellSizeH);
    const [r, g, b] = Array.from(ctx.getImageData(x, y, 1, 1).data);
    const r2 = r / 255;
    const g2 = g / 255;
    const b2 = b / 255;
    colorTable.push([r2, g2, b2]);
  }
  return colorTable;
};

export const colorTableToLut = (colorTable: ColorTable) => {
  const strTable = colorTable.map((l) => l.join(" ")).join("\n");
  return [
    'TITLE "Generated by 3dLutGenerator"',
    "LUT_3D_SIZE 17",
    "",
    strTable,
  ].join("\n");
};

export const getTextDownloadUrl = (s: string) => {
  return URL.createObjectURL(new Blob([s], { type: "text/plain" }));
};

export const drawFileImageToCanvas = (
  file: File,
  canvas: HTMLCanvasElement
) => {
  const reader = new FileReader();
  const image = new Image();
  const context = canvas.getContext("2d");
  if (!context) throw new Error("Canvas context is not available");
  return new Promise((res, rej) => {
    reader.readAsDataURL(file);
    reader.onload = () => {
      image.src = reader.result as string;
    };
    image.onerror = rej;
    image.onload = () => {
      context.drawImage(image, 0, 0, canvas.width, canvas.height);
      res(null);
    };
    reader.onerror = rej;
  });
};
